const handleUseMedicine = async (bot, receivedObject, userState, notion, mainKeyboard) => {
    
    let chatId;
    let data;
    let text;

    // –Ø–∫—â–æ —Ü–µ callback_query
    if (receivedObject.data && receivedObject.message) {
        chatId = receivedObject.message.chat.id;
        data = receivedObject.data;
    }
    // –Ø–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    else if (receivedObject.chat && receivedObject.text) {
        chatId = receivedObject.chat.id;
        text = receivedObject.text;
    }
    else {
        console.error('üö® –ü–æ–º–∏–ª–∫–∞: –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π –æ–±‚Äô—î–∫—Ç —É handleUseMedicine:', receivedObject);
        return;
    }

    // –î–∞–ª—ñ —Ç–≤–æ—è —ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞...


    
    if (text === '‚ûñ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ª—ñ–∫–∏') {
        try {
            const response = await notion.databases.query({
                database_id: process.env.NOTION_DATABASE_ID,
            });

            if (response.results && response.results.length > 0) {
                const medicinesKeyboard = {
                    inline_keyboard: response.results
                        .map(medicine => {
                            const titleProperty = medicine.properties['–ù–∞–∑–≤–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É'];
                            if (titleProperty && titleProperty.title && titleProperty.title.length > 0) {
                                return [
                                    {
                                        text: titleProperty.title[0].plain_text,
                                        callback_data: `use_${medicine.id}`
                                    }
                                ];
                            }
                            return null; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –Ω–∞–∑–≤–∏
                        })
                        .filter(row => row !== null) // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–ø—É—â–µ–Ω—ñ –∑–∞–ø–∏—Å–∏
                };

                if (medicinesKeyboard.inline_keyboard.length > 0) {
                    return bot.sendMessage(chatId, 'üíä –û–±–µ—Ä–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—à –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏:', { reply_markup: medicinesKeyboard });
                } else {
                    return bot.sendMessage(chatId, 'üíä –í –∞–ø—Ç–µ—á—Ü—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –ª—ñ–∫—ñ–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.', mainKeyboard);
                }

            } else {
                return bot.sendMessage(chatId, 'üíä –í –∞–ø—Ç–µ—á—Ü—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –ª—ñ–∫—ñ–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.', mainKeyboard);
            }
        } catch (error) {
            console.error('üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –ª—ñ–∫—ñ–≤ –∑ Notion:', error.message);
            return bot.sendMessage(chatId, `‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –ª—ñ–∫—ñ–≤: ${error.message}`, mainKeyboard);
        }
        return; // –í–∞–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ return, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏
    }

    if (data && data.startsWith('use_')) {
        const medicineId = data.split('_')[1];
        try {
            const medicine = await notion.pages.retrieve({ page_id: medicineId });
            if (medicine && medicine.properties) {
                const medicineName = medicine.properties['–ù–∞–∑–≤–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É'].title[0].plain_text;
                const availableQuantity = medicine.properties['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'].number || 0;

                userState[chatId] = { step: '–≤–≤–µ–¥–µ–Ω–Ω—è_–∫—ñ–ª—å–∫–æ—Å—Ç—ñ_–¥–ª—è_–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è', medicineId };
                bot.answerCallbackQuery(receivedObject.id); // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ callback_query
                return bot.sendMessage(chatId, `üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—É *${medicineName}* –∑–∞—Ä–∞–∑ —î —É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: *${availableQuantity} —à—Ç*.
                     –°–∫—ñ–ª—å–∫–∏ —à—Ç –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î—Ç–µ?`, { parse_mode: 'Markdown' });
            } else {
                return bot.sendMessage(chatId, 'üíä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Ä–∞–Ω–∏–π –ø—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', mainKeyboard);
            }
        } catch (error) {
            console.error('üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ª—ñ–∫–∏ –∑ Notion:', error.message);
            return bot.sendMessage(chatId, `‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ª—ñ–∫–∏: ${error.message}`, mainKeyboard);
        }
        return; // –í–∞–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ return
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    if (userState[chatId]?.step === '–≤–≤–µ–¥–µ–Ω–Ω—è_–∫—ñ–ª—å–∫–æ—Å—Ç—ñ_–¥–ª—è_–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è' && receivedObject.text) {
        const text = receivedObject.text;
        const quantityToUse = parseInt(text);
        if (isNaN(quantityToUse) || quantityToUse <= 0) {
            return bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.');
        }

        const medicineId = userState[chatId].medicineId;
        try {
            const medicine = await notion.pages.retrieve({ page_id: medicineId });
            if (medicine && medicine.properties) {
                const availableQuantity = medicine.properties['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'].number || 0;

                if (quantityToUse > availableQuantity) {
                    return bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É *${medicine.properties['–ù–∞–∑–≤–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É'].title[0].plain_text}*. –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ª–∏—à–µ *${availableQuantity} —à—Ç*.`, { parse_mode: 'Markdown' });
                }

                const newQuantity = availableQuantity - quantityToUse;
                await notion.pages.update({
                    page_id: medicineId,
                    properties: {
                        '–ö—ñ–ª—å–∫—ñ—Å—Ç—å': { number: newQuantity }
                    }
                });

                delete userState[chatId];
                return bot.sendMessage(chatId, `‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ ${quantityToUse} —à—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç—É ${medicine.properties['–ù–∞–∑–≤–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É'].title[0].plain_text}. 
                    –ó–∞–ª–∏—à–∏–ª–æ—Å—è ${newQuantity} —à—Ç.`, mainKeyboard);
            } else {
                return bot.sendMessage(chatId, 'üíä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Ä–∞–Ω–∏–π –ø—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', mainKeyboard);
            }
        } catch (error) {
            console.error('üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª—ñ–∫—ñ–≤ —É Notion:', error.message);
            return bot.sendMessage(chatId, `‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª—ñ–∫—ñ–≤: ${error.message}`, mainKeyboard);
        }
    }
};



module.exports = handleUseMedicine;