// handlers/checkInventory.js
const moment = require('moment');

const checkInventoryHandler = async (bot, receivedObject, userState, notion, mainKeyboard) => {
    const chatId = receivedObject.chat ? receivedObject.chat.id : receivedObject.message.chat.id;

    try {
        const response = await notion.databases.query({
            database_id: process.env.NOTION_DATABASE_ID,
        });

        const expiringSoonThreshold = 2;
        const outOfStock = [];
        const expiringSoon = [];
        const expired = [];
        const allMedicines = [];

        response.results.forEach(page => {
            const name = page.properties['–ù–∞–∑–≤–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É']?.title?.[0]?.plain_text || '–ë–µ–∑ –Ω–∞–∑–≤–∏';
            const quantity = page.properties['–ö—ñ–ª—å–∫—ñ—Å—Ç—å']?.number ?? 0;
            const type = page.properties['–¢–∏–ø']?.select?.name;
            const expiryDateProp = page.properties['–î–∞—Ç–∞ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ']?.date?.start;
            const expiryDate = expiryDateProp ? moment(expiryDateProp, 'YYYY-MM-DD') : null;
            const now = moment();
            const oneMonthFromNow = moment().add(1, 'month').startOf('day');

            allMedicines.push(`üíä ${name} - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${quantity}`);

            if (quantity === 0) {
                outOfStock.push(`üî¥ ${name}`);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è —Ç–∞–±–ª–µ—Ç–æ–∫, –ø–æ—Ä–æ—à–∫—ñ–≤, —ñ–Ω'—î–∫—Ü—ñ–π (–∫—ñ–ª—å–∫—ñ—Å—Ç—å <= 2)
            if (type && ['–¢–∞–±–ª–µ—Ç–∫–∏', '–ü—ñ–≥—É–ª–∫–∏', '–ü–æ—Ä–æ—à–æ–∫', '–Ü–Ω\'—î–∫—Ü—ñ—è'].includes(type) && quantity <= expiringSoonThreshold && quantity > 0) {
                expiringSoon.push(`üü° ${name} (–∑–∞–ª–∏—à–∏–ª–æ—Å—å ${quantity})`);
            }
                    
            console.log(`–ü—Ä–µ–ø–∞—Ä–∞—Ç: ${name}, –î–∞—Ç–∞ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ (Notion): ${expiryDateProp}, –î–∞—Ç–∞ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ (Moment): ${expiryDate ? expiryDate.format('YYYY-MM-DD') : '–Ω–µ–º–∞—î'}, –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞: ${now.format('YYYY-MM-DD')}`);
            if (expiryDate && expiryDate.isValid() && expiryDate.isBefore(now, 'day')) {
                expired.push(`‚ùå ${name} (–∑–∞–∫—ñ–Ω—á–∏–≤—Å—è ${expiryDate.format('DD.MM.YYYY')})`);
            }

            else if (expiryDate && expiryDate.isValid() && expiryDate.isBefore(oneMonthFromNow, 'day') && expiryDate.isAfter(now, 'day')) {
                expiringSoon.push(`‚ö†Ô∏è ${name} (–∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –¥–æ ${expiryDate.format('DD.MM.YYYY')})`);
            }
        });

        let message = '‚úÖ *–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ø—Ç–µ—á–∫–∏:*\n\n';

        if (expired.length > 0) {
            message += '*–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏:*\n';
            message += expired.join('\n') + '\n\n';
        }

        if (outOfStock.length > 0) {
            message += '*–ó–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å:*\n';
            message += outOfStock.join('\n') + '\n\n';
        }

        if (expiringSoon.length > 0) {
            message += `*–ó–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è:*\n`; // –ó–º—ñ–Ω–µ–Ω–æ –æ–ø–∏—Å, —â–æ–± –±—É—Ç–∏ –±—ñ–ª—å—à –∑–∞–≥–∞–ª—å–Ω–∏–º
            message += expiringSoon.join('\n') + '\n\n';
        }

        if (expired.length === 0 && outOfStock.length === 0 && expiringSoon.length === 0) {
            message += '*–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫—É, –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∞–±–æ –º–∞–π–∂–µ –∑–∞–∫—ñ–Ω—á–µ–Ω–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.*\n\n'; // –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        }

       
        return bot.sendMessage(chatId, message, { parse_mode: 'Markdown', reply_markup: mainKeyboard });

    } catch (error) {
        console.error('üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∞–ø—Ç–µ—á–∫–∏:', error.message);
        return bot.sendMessage(chatId, '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∞–ø—Ç–µ—á–∫–∏.', mainKeyboard);
    }
};

module.exports = checkInventoryHandler;