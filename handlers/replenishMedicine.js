const handleReplenishMedicine = async (bot, receivedObject, userState, notion, mainKeyboard) => {
    let chatId;
    let data;
    let text;

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ chatId –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –æ–±'—î–∫—Ç–∞
    if (receivedObject.data && receivedObject.message) {
        chatId = receivedObject.message.chat.id;
        data = receivedObject.data;
    } else if (receivedObject.chat && receivedObject.text) {
        chatId = receivedObject.chat.id;
        text = receivedObject.text;
    } else {
        console.error('üö® –ü–æ–º–∏–ª–∫–∞: –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π –æ–±‚Äô—î–∫—Ç —É handleReplenishMedicine:', receivedObject);
        return;
    }

    if (text === 'üîÑ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –∞–ø—Ç–µ—á–∫—É') {
        try {
            const response = await notion.databases.query({
                database_id: process.env.NOTION_DATABASE_ID,
            });

            if (response.results && response.results.length > 0) {
                const medicinesKeyboard = {
                    inline_keyboard: response.results
                        .map(medicine => {
                            const titleProperty = medicine.properties['–ù–∞–∑–≤–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É'];
                            if (titleProperty && titleProperty.title && titleProperty.title.length > 0) {
                                return [
                                    {
                                        text: titleProperty.title[0].plain_text,
                                        callback_data: `replenish_${medicine.id}`
                                    }
                                ];
                            }
                            return null;
                        })
                        .filter(row => row !== null)
                };

                if (medicinesKeyboard.inline_keyboard.length > 0) {
                    return bot.sendMessage(chatId, 'üíä –û–±–µ—Ä–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç, –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏:', { reply_markup: medicinesKeyboard });
                } else {
                    return bot.sendMessage(chatId, 'üíä –í –∞–ø—Ç–µ—á—Ü—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –ª—ñ–∫—ñ–≤ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.', mainKeyboard);
                }

            } else {
                return bot.sendMessage(chatId, 'üíä –í –∞–ø—Ç–µ—á—Ü—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –ª—ñ–∫—ñ–≤.', mainKeyboard);
            }
        } catch (error) {
            console.error('üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –ª—ñ–∫—ñ–≤ –∑ Notion:', error.message);
            return bot.sendMessage(chatId, `‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –ª—ñ–∫—ñ–≤: ${error.message}`, mainKeyboard);
        }
        return;
    }

    if (data && data.startsWith('replenish_')) {
        const medicineId = data.split('_')[1];
        userState[chatId] = { step: '–≤–≤–µ–¥–µ–Ω–Ω—è_–¥–∞—Ç–∏_–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è', medicineId };
        bot.answerCallbackQuery(receivedObject.id);
        const options = {
            reply_markup: {
                remove_keyboard: true,
            },
        };
        return bot.sendMessage(chatId, 'üìÜ –í–≤–µ–¥–∏ –¥–∞—Ç—É –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ (—É —Ñ–æ—Ä–º–∞—Ç—ñ DD-MM-YYYY):', options);
    }

    if (userState[chatId]?.step === '–≤–≤–µ–¥–µ–Ω–Ω—è_–¥–∞—Ç–∏_–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è' && text) {
        const cleaned = text.replace(/[./\\]/g, '-');
        const [day, month, year] = cleaned.split('-');
        if (!day || !month || !year || isNaN(day) || isNaN(month) || isNaN(year)) {
            return bot.sendMessage(chatId, '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ *DD-MM-YYYY*, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 12-07-2025', { parse_mode: 'Markdown' });
        }
        const isoDate = `${year.padStart(4, '20')}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
        userState[chatId].expiryDate = isoDate;
        userState[chatId].step = '–≤–≤–µ–¥–µ–Ω–Ω—è_–∫—ñ–ª—å–∫–æ—Å—Ç—ñ_–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è';
        return bot.sendMessage(chatId, 'üî¢ –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:');
    }

    if (userState[chatId]?.step === '–≤–≤–µ–¥–µ–Ω–Ω—è_–∫—ñ–ª—å–∫–æ—Å—Ç—ñ_–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è' && text) {
        const quantityToAdd = parseInt(text);
        if (isNaN(quantityToAdd) || quantityToAdd <= 0) {
            return bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.');
        }
        const medicineId = userState[chatId].medicineId;
        const expiryDate = userState[chatId].expiryDate;

        try {
            const medicine = await notion.pages.retrieve({ page_id: medicineId });
            if (medicine && medicine.properties) {
                const currentQuantity = medicine.properties['–ö—ñ–ª—å–∫—ñ—Å—Ç—å']?.number || 0;
                const newQuantity = currentQuantity + quantityToAdd;

                const propertiesToUpdate = {
                    '–ö—ñ–ª—å–∫—ñ—Å—Ç—å': { number: newQuantity }
                };

                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ, —è–∫—â–æ —Ç–∞–∫–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å —ñ—Å–Ω—É—î
                if (medicine.properties['–î–∞—Ç–∞ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ'] !== undefined) {
                    propertiesToUpdate['–î–∞—Ç–∞ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ'] = { date: { start: expiryDate } };
                } else {
                    console.warn(`‚ö†Ô∏è –í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å '–î–∞—Ç–∞ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ª—ñ–∫—ñ–≤ –∑ ID ${medicineId}.`);
                }

                await notion.pages.update({
                    page_id: medicineId,
                    properties: propertiesToUpdate
                });

                delete userState[chatId];
                return bot.sendMessage(chatId, `‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç—É –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ ${quantityToAdd} —à—Ç. –ù–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${newQuantity} —à—Ç.`, mainKeyboard);

            } else {
                return bot.sendMessage(chatId, 'üíä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Ä–∞–Ω–∏–π –ø—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', mainKeyboard);
            }
        } catch (error) {
            console.error('üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª—ñ–∫—ñ–≤ —É Notion:', error.message);
            return bot.sendMessage(chatId, `‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—ñ –ª—ñ–∫—ñ–≤: ${error.message}`, mainKeyboard);
        }
    }
};

module.exports = handleReplenishMedicine;