const handleAddMedicine = async (bot, msg, userState, notion, mainKeyboard) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const state = userState[chatId];

    if (text === '‚ûï –î–æ–¥–∞—Ç–∏ –ª—ñ–∫–∏') {
        userState[chatId] = { step: '–Ω–∞–∑–≤–∞' };
        const options = {
            reply_markup: {
                remove_keyboard: true,
            },
        };
        return bot.sendMessage(chatId, 'üü¢ –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É:', options);
    }

    if (!state) return;

    switch (state.step) {
        case '–Ω–∞–∑–≤–∞':
            state.–Ω–∞–∑–≤–∞ = text;
            state.step = '–≤—ñ–¥–ß–æ–≥–æ';
            return bot.sendMessage(chatId, 'üíä –í—ñ–¥ —á–æ–≥–æ —Ü–µ–π –ø—Ä–µ–ø–∞—Ä–∞—Ç?');
        case '–≤—ñ–¥–ß–æ–≥–æ':
            // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
            state.–≤—ñ–¥–ß–æ–≥–æ = text.toLowerCase();
            state.step = '–¥–∞—Ç–∞';
            return bot.sendMessage(chatId, 'üìÜ –í–≤–µ–¥–∏ –¥–∞—Ç—É –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ (—É —Ñ–æ—Ä–º–∞—Ç—ñ DD-MM-YYYY):');
        case '–¥–∞—Ç–∞':
            const cleaned = text.replace(/[./\\]/g, '-');
            const [day, month, year] = cleaned.split('-');
            if (!day || !month || !year || isNaN(day) || isNaN(month) || isNaN(year)) {
                return bot.sendMessage(chatId, '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ *DD-MM-YYYY*, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 12-07-2025', { parse_mode: 'Markdown' });
            }
            const isoDate = `${year.padStart(4, '20')}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
            state.–¥–∞—Ç–∞ = isoDate;
            state.step = '—Ç–∏–ø';
            const typeKeyboard = {
                reply_markup: {
                    keyboard: [
                        ['–¢–∞–±–ª–µ—Ç–∫–∏', '–°–ø—Ä–µ–π'],
                        ['–ì–µ–ª—å/–º–∞–∑—å', '–°—ñ—Ä–æ–ø'],
                        ['–Ü–Ω\'—î–∫—Ü—ñ—ó', '–ö—Ä–∞–ø–ª—ñ'],
                        ['–ü–æ—Ä–æ—à–æ–∫', '–Ü–Ω–≥–∞–ª—è—Ç–æ—Ä']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true,
                },
            };
            return bot.sendMessage(chatId, 'üì¶ –û–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–µ–ø–∞—Ä–∞—Ç—É:', typeKeyboard);
        case '—Ç–∏–ø':
            const allowedTypes = ['—Ç–∞–±–ª–µ—Ç–∫–∏', '—Å–ø—Ä–µ–π', '–≥–µ–ª—å/–º–∞–∑—å', '—Å—ñ—Ä–æ–ø', '—ñ–Ω\'—î–∫—Ü—ñ—ó', '–∫—Ä–∞–ø–ª—ñ', '–ø–æ—Ä–æ—à–æ–∫' , '—ñ–Ω–≥–∞–ª—è—Ç–æ—Ä'];
            if (allowedTypes.includes(text.toLowerCase())) {
                state.—Ç–∏–ø = text;
                state.step = '–∫—ñ–ª—å–∫—ñ—Å—Ç—å';
                return bot.sendMessage(chatId, 'üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å:');
            } else {
                const typeKeyboard = {
                    reply_markup: {
                        keyboard: [
                            ['–¢–∞–±–ª–µ—Ç–∫–∏', '–°–ø—Ä–µ–π'],
                            ['–ì–µ–ª—å/–º–∞–∑—å', '–°—ñ—Ä–æ–ø'],
                            ['–Ü–Ω\'—î–∫—Ü—ñ—ó', '–ö—Ä–∞–ø–ª—ñ'],
                            ['–ü–æ—Ä–æ—à–æ–∫', '–Ü–Ω–≥–∞–ª—è—Ç–æ—Ä']
                        ],
                        resize_keyboard: true,
                        one_time_keyboard: true,
                    },
                };
                return bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–µ–ø–∞—Ä–∞—Ç—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:', typeKeyboard);
            }
        case '–∫—ñ–ª—å–∫—ñ—Å—Ç—å':
            const –∫—ñ–ª—å–∫—ñ—Å—Ç—å = parseInt(text);
            if (isNaN(–∫—ñ–ª—å–∫—ñ—Å—Ç—å)) {
                return bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ.');
            }
            state.–∫—ñ–ª—å–∫—ñ—Å—Ç—å = –∫—ñ–ª—å–∫—ñ—Å—Ç—å;

            try {
                await notion.pages.create({
                    parent: { database_id: process.env.NOTION_DATABASE_ID },
                    properties: {
                        '–ù–∞–∑–≤–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É': { title: [{ text: { content: state.–Ω–∞–∑–≤–∞ } }] },
                        '–í—ñ–¥ —á–æ–≥–æ': { multi_select: [{ name: state.–≤—ñ–¥–ß–æ–≥–æ }] },
                        '–î–∞—Ç–∞ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ': { date: { start: state.–¥–∞—Ç–∞ } },
                        '–¢–∏–ø –ø—Ä–µ–ø–∞—Ä–∞—Ç—É': { select: { name: state.—Ç–∏–ø } },
                        '–ö—ñ–ª—å–∫—ñ—Å—Ç—å': { number: state.–∫—ñ–ª—å–∫—ñ—Å—Ç—å }
                    }
                });

                delete userState[chatId];
                return bot.sendMessage(chatId, `‚úÖ –ü—Ä–µ–ø–∞—Ä–∞—Ç ${state.–Ω–∞–∑–≤–∞} –¥–æ–¥–∞–Ω–æ –¥–æ –∞–ø—Ç–µ—á–∫–∏!`, mainKeyboard);
            } catch (error) {
                console.error('üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ Notion:', error.message);
                return bot.sendMessage(chatId, `‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –∞–ø—Ç–µ—á–∫–∏: ${error.message}`, mainKeyboard);
            }
            break;
    }
};

module.exports = handleAddMedicine;